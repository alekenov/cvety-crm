# Build stage for frontend
FROM node:18-alpine AS frontend-builder

WORKDIR /app

# Copy only package files first (better caching)
COPY package*.json ./

# Install dependencies with memory constraints
ENV NODE_OPTIONS="--max-old-space-size=512"
RUN npm ci --prefer-offline --no-audit --maxsockets 1 --loglevel error

# Copy source files
COPY index.html vite.config.ts tsconfig*.json ./
COPY src ./src
COPY public ./public

# Build with memory optimization
RUN npm run build && rm -rf node_modules src public

# Python dependencies stage
FROM python:3.9-slim AS python-deps

WORKDIR /deps

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY backend/requirements.txt .

# Create wheels for all dependencies (more memory efficient)
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /deps/wheels -r requirements.txt

# Final stage
FROM python:3.9-slim

WORKDIR /app

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*

# Copy wheels and install
COPY --from=python-deps /deps/wheels /wheels
RUN pip install --no-cache-dir --no-compile --disable-pip-version-check /wheels/* && rm -rf /wheels

# Copy backend code
COPY backend ./backend

# Copy frontend build
COPY --from=frontend-builder /app/dist ./dist

# Copy entrypoint and other files
COPY docker-entrypoint.sh components.json ./
RUN chmod +x docker-entrypoint.sh

# Set environment
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PORT=8000

EXPOSE ${PORT}

ENTRYPOINT ["./docker-entrypoint.sh"]