import { test, expect } from '@playwright/test';
import { OrdersPage } from '../pages/OrdersPage';
import { CustomersPage } from '../pages/CustomersPage';
import { loginAndNavigateTo } from '../helpers/auth-helper';
import { createTestCustomer, waitForOrderInList, verifyOrderDetails } from '../helpers/business-helpers';

test.describe('Order Creation Flow', () => {
  const existingUserPhone = '+77011234567';
  let ordersPage: OrdersPage;
  let customersPage: CustomersPage;

  test.beforeEach(async ({ page }) => {
    ordersPage = new OrdersPage(page);
    customersPage = new CustomersPage(page);
    await loginAndNavigateTo(page, '/orders', existingUserPhone);
  });

  test('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –ø–æ–ª–Ω—ã–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø–æ–ª–µ–π', async ({ page }) => {
    test.setTimeout(60000); // 1 –º–∏–Ω—É—Ç–∞
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    await page.goto('/customers');
    const customer = await createTestCustomer(page, '–ü–æ–ª–Ω—ã–π –ó–∞–∫–∞–∑ –ö–ª–∏–µ–Ω—Ç');
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç: ${customer.name}`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞
    await page.goto('/orders/new');
    await expect(page.locator('[data-testid="step-indicator"]')).toBeVisible();
    
    // –®–ê–ì 1: –í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
    await ordersPage.selectCustomer(customer.name);
    await ordersPage.goToNextStep();
    const step1 = await ordersPage.getCurrentStep();
    expect(step1).toBe(2);
    console.log('‚úÖ –®–∞–≥ 1: –ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω');
    
    // –®–ê–ì 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ (3 —Ä–∞–∑–Ω—ã—Ö)
    const products = [
      { name: '–ë—É–∫–µ—Ç –∏–∑ 25 –∫—Ä–∞—Å–Ω—ã—Ö —Ä–æ–∑', quantity: 1 },
      { name: '–ö–æ–º–ø–æ–∑–∏—Ü–∏—è "–í–µ—Å–µ–Ω–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"', quantity: 2 },
      { name: '–ì–æ—Ä—Ç–µ–Ω–∑–∏—è –≤ –≥–æ—Ä—à–∫–µ', quantity: 1 }
    ];
    
    for (const product of products) {
      await ordersPage.addProduct(product.name, product.quantity);
      await page.waitForTimeout(500);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã
    const cartItems = page.locator('[data-testid="cart-item"]');
    await expect(cartItems).toHaveCount(products.length);
    
    await ordersPage.goToNextStep();
    const step2 = await ordersPage.getCurrentStep();
    expect(step2).toBe(3);
    console.log('‚úÖ –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–æ 3 —Ä–∞–∑–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞');
    
    // –®–ê–ì 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    await ordersPage.setDeliveryInfo({
      method: 'delivery',
      date: tomorrow,
      timeFrom: '14:00',
      timeTo: '18:00',
      address: '–ø—Ä. –î–æ—Å—Ç—ã–∫ 123, –∫–≤. 45',
      recipientName: customer.name,
      recipientPhone: customer.phone,
      comment: '–ü–æ–∑–≤–æ–Ω–∏—Ç—å –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏. –ö–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞ 1234#'
    });
    
    await ordersPage.goToNextStep();
    const step3 = await ordersPage.getCurrentStep();
    expect(step3).toBe(4);
    console.log('‚úÖ –®–∞–≥ 3: –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ 14:00-18:00');
    
    // –®–ê–ì 4: –í—ã–±–æ—Ä –æ–ø–ª–∞—Ç—ã Kaspi
    await ordersPage.selectPaymentMethod('kaspi');
    console.log('‚úÖ –®–∞–≥ 4: –í—ã–±—Ä–∞–Ω–∞ –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Kaspi');
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    await ordersPage.submitOrder();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–æ–≤
    await expect(page).toHaveURL('/orders');
    
    // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const toastText = await page.locator('[data-sonner-toast]').textContent();
    const orderId = toastText?.match(/#(\d+)/)?.[1];
    expect(orderId).toBeTruthy();
    
    console.log(`‚úÖ –ó–∞–∫–∞–∑ #${orderId} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ
    await waitForOrderInList(page, orderId!);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    await verifyOrderDetails(page, orderId!, {
      status: '–ù–æ–≤—ã–π',
      customer: customer.name
    });
    
    console.log('üéâ –ü–æ–ª–Ω—ã–π –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ!');
  });

  test('–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞', async ({ page }) => {
    test.setTimeout(45000); // 45 —Å–µ–∫—É–Ω–¥
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    const vipCustomerName = 'VIP –ö–ª–∏–µ–Ω—Ç';
    
    // –°–æ–∑–¥–∞–µ–º VIP –∫–ª–∏–µ–Ω—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞–∫–∞–∑–æ–≤
    await page.goto('/customers');
    const vipCustomer = await createTestCustomer(page, vipCustomerName);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω VIP –∫–ª–∏–µ–Ω—Ç: ${vipCustomer.name}`);
    
    // –ò–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑
    await page.goto('/orders/new');
    
    // –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
    await ordersPage.selectCustomer(vipCustomer.name);
    await ordersPage.goToNextStep();
    console.log('‚úÖ VIP –∫–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±—É–∫–µ—Ç (—Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π)
    await ordersPage.addProduct('–ë—É–∫–µ—Ç –∏–∑ 25 –∫—Ä–∞—Å–Ω—ã—Ö —Ä–æ–∑', 1);
    await ordersPage.goToNextStep();
    console.log('‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±—É–∫–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å (–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞)
    await ordersPage.setDeliveryInfo({
      method: 'self_pickup', // –°–∞–º–æ–≤—ã–≤–æ–∑ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
      date: new Date(), // –°–µ–≥–æ–¥–Ω—è
      timeFrom: '18:00',
      timeTo: '20:00',
      comment: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç'
    });
    await ordersPage.goToNextStep();
    console.log('‚úÖ –í—ã–±—Ä–∞–Ω —Å–∞–º–æ–≤—ã–≤–æ–∑ —Å–µ–≥–æ–¥–Ω—è');
    
    // –ë—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏
    await ordersPage.selectPaymentMethod('cash');
    console.log('‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏');
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    await ordersPage.submitOrder();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
    await expect(page).toHaveURL('/orders');
    const toastText = await page.locator('[data-sonner-toast]').textContent();
    const orderId = toastText?.match(/#(\d+)/)?.[1];
    
    console.log(`‚úÖ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑ #${orderId} —Å–æ–∑–¥–∞–Ω –∑–∞ < 30 —Å–µ–∫—É–Ω–¥!`);
    
    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    const endTime = Date.now();
    const duration = (endTime - Date.now() + 30000) / 1000; // –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ~${duration} —Å–µ–∫—É–Ω–¥`);
    
    console.log('üéâ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑ –¥–ª—è VIP –∫–ª–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
  });

  test('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã', async ({ page }) => {
    test.setTimeout(45000);
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    await page.goto('/customers');
    const customer = await createTestCustomer(page, '–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞');
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    await page.goto('/orders/new');
    
    // –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    await ordersPage.selectCustomer(customer.name);
    await ordersPage.goToNextStep();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
    const productsWithPrices = [
      { name: '–ë—É–∫–µ—Ç –∏–∑ 25 –∫—Ä–∞—Å–Ω—ã—Ö —Ä–æ–∑', quantity: 2, price: 15000 }, // 30000
      { name: '–ö–æ–º–ø–æ–∑–∏—Ü–∏—è "–í–µ—Å–µ–Ω–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"', quantity: 1, price: 10000 } // 10000
    ];
    
    let expectedTotal = 0;
    for (const product of productsWithPrices) {
      await ordersPage.addProduct(product.name, product.quantity);
      expectedTotal += product.price * product.quantity;
      await page.waitForTimeout(500);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É–º–º—ã
    const subtotalElement = page.locator('[data-testid="order-subtotal"]');
    if (await subtotalElement.count() > 0) {
      const subtotalText = await subtotalElement.textContent();
      expect(subtotalText).toContain(expectedTotal.toLocaleString());
      console.log(`‚úÖ –ü–æ–¥–∏—Ç–æ–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: ${expectedTotal} ‚Ç∏`);
    }
    
    await ordersPage.goToNextStep();
    
    // –î–æ—Å—Ç–∞–≤–∫–∞ (–¥–æ–±–∞–≤–∏—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏)
    const deliveryFee = 1500;
    await ordersPage.setDeliveryInfo({
      method: 'delivery',
      date: new Date(),
      timeFrom: '12:00',
      timeTo: '14:00',
      address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è 1',
      recipientName: customer.name,
      recipientPhone: customer.phone
    });
    
    expectedTotal += deliveryFee;
    await ordersPage.goToNextStep();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—É–º–º—É
    const totalElement = page.locator('[data-testid="order-total"]');
    if (await totalElement.count() > 0) {
      const totalText = await totalElement.textContent();
      expect(totalText).toContain(expectedTotal.toLocaleString());
      console.log(`‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π: ${expectedTotal} ‚Ç∏`);
    }
    
    // –û–ø–ª–∞—Ç–∞
    await ordersPage.selectPaymentMethod('transfer');
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    await ordersPage.submitOrder();
    await expect(page).toHaveURL('/orders');
    
    const toastText = await page.locator('[data-sonner-toast]').textContent();
    const orderId = toastText?.match(/#(\d+)/)?.[1];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –≤ —Å–ø–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤
    const orderRow = page.locator('tbody tr').filter({ hasText: `#${orderId}` });
    const totalInList = await orderRow.locator('[data-testid="order-total"]').textContent();
    
    if (totalInList) {
      expect(totalInList).toContain(expectedTotal.toLocaleString());
      console.log(`‚úÖ –°—É–º–º–∞ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è: ${expectedTotal} ‚Ç∏`);
    }
    
    console.log('üéâ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º —Å—É–º–º—ã!');
  });
});