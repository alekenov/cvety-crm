import { test, expect } from '@playwright/test';
import { WarehousePage } from '../pages/WarehousePage';
import { OrdersPage } from '../pages/OrdersPage';
import { loginAndNavigateTo } from '../helpers/auth-helper';
import { 
  quickReceiveInventory, 
  checkInventoryLevel,
  createTestCustomer,
  createCompleteOrder
} from '../helpers/business-helpers';

test.describe('Inventory Management', () => {
  const existingUserPhone = '+77011234567';
  let warehousePage: WarehousePage;

  test.beforeEach(async ({ page }) => {
    warehousePage = new WarehousePage(page);
    await loginAndNavigateTo(page, '/warehouse', existingUserPhone);
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ', async ({ page }) => {
    test.setTimeout(30000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫–ª–∞–¥–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
    await expect(page.locator('h1')).toContainText('–û—Å—Ç–∞—Ç–∫–∏');
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫–ª–∞–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    await expect(page.locator('table')).toBeVisible();
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    const itemsCount = await warehousePage.getItemsCount();
    console.log(`üì¶ –ù–∞ —Å–∫–ª–∞–¥–µ ${itemsCount} –ø–æ–∑–∏—Ü–∏–π`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫
    await warehousePage.searchItems('–†–æ–∑–∞');
    await page.waitForTimeout(1000);
    
    const searchResults = await warehousePage.getItemsCount();
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —Ä–æ–∑: ${searchResults} —à—Ç`);
    
    // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫
    await page.locator('input[placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"]').clear();
    await page.waitForTimeout(1000);
    
    console.log('üéâ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç!');
  });

  test.skip('–ü—Ä–∏—ë–º –ø–æ—Å—Ç–∞–≤–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω —Å –≤–∞–ª—é—Ç–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º', async ({ page }) => {
    test.setTimeout(45000);
    
    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
    let initialStock;
    const variety = '–†–æ–∑–∞ –≠–∫–≤–∞–¥–æ—Ä –ü—Ä–µ–º–∏—É–º';
    
    try {
      initialStock = await checkInventoryLevel(page, variety);
    } catch {
      initialStock = { quantity: 0, reserved: 0, available: 0 };
    }
    console.log(`üì¶ –ù–∞—á–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ "${variety}": ${initialStock.quantity} —à—Ç`);
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å—Ç–∞–≤–∫–∏
    const deliveryData = {
      variety: variety,
      quantity: 100,
      costUSD: 2.5,  // $2.5 –∑–∞ —à—Ç—É–∫—É
      usdRate: 475   // –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞
    };
    
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ä–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π 100%
    const expectedRetailPrice = Math.round(deliveryData.costUSD * deliveryData.usdRate * 2);
    console.log(`üí∞ –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã: $${deliveryData.costUSD} √ó ${deliveryData.usdRate} √ó 2 = ${expectedRetailPrice} ‚Ç∏`);
    
    // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫—É
    const inventory = await quickReceiveInventory(
      page,
      deliveryData.variety,
      deliveryData.quantity,
      deliveryData.costUSD,
      deliveryData.usdRate
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await expect(page.locator('[data-sonner-toast]')).toBeVisible();
    const toastText = await page.locator('[data-sonner-toast]').textContent();
    expect(toastText).toContain('—É—Å–ø–µ—à–Ω–æ');
    console.log('‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
    const newStock = await checkInventoryLevel(page, variety);
    expect(newStock.quantity).toBe(initialStock.quantity + deliveryData.quantity);
    console.log(`‚úÖ –û—Å—Ç–∞—Ç–∫–∏ —É–≤–µ–ª–∏—á–∏–ª–∏—Å—å: ${initialStock.quantity} ‚Üí ${newStock.quantity} —à—Ç`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    expect(inventory.retailPrice).toBe(expectedRetailPrice);
    console.log(`‚úÖ –†–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${inventory.retailPrice} ‚Ç∏`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
    await warehousePage.searchItems(variety);
    await page.waitForTimeout(1000);
    
    const itemRow = page.locator('tbody tr').filter({ hasText: variety }).first();
    const priceCell = await itemRow.locator('td:nth-child(3)').textContent();
    expect(priceCell).toContain(expectedRetailPrice.toLocaleString());
    console.log('‚úÖ –¶–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–∫–ª–∞–¥–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
    const stockInfo = await warehousePage.getItemStock(variety);
    expect(stockInfo.available).toBe(newStock.quantity);
    console.log(`‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: ${stockInfo.available} —à—Ç`);
    
    console.log('üéâ –ü—Ä–∏—ë–º –ø–æ—Å—Ç–∞–≤–∫–∏ —Å –≤–∞–ª—é—Ç–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
  });

  test.skip('–°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ', async ({ page }) => {
    test.setTimeout(60000);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞
    const variety = '–¢—é–ª—å–ø–∞–Ω –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π';
    const initialQuantity = 50;
    
    // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫—É
    await quickReceiveInventory(page, variety, initialQuantity, 1.5, 475);
    console.log(`‚úÖ –ü—Ä–∏–Ω—è—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∞: ${initialQuantity} —à—Ç "${variety}"`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
    const stockBefore = await checkInventoryLevel(page, variety);
    console.log(`üì¶ –û—Å—Ç–∞—Ç–∫–∏ –¥–æ –ø—Ä–æ–¥–∞–∂–∏: ${stockBefore.quantity} —à—Ç (–¥–æ—Å—Ç—É–ø–Ω–æ: ${stockBefore.available})`);
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
    await page.goto('/customers');
    const customer = await createTestCustomer(page, '–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è');
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç: ${customer.name}`);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ 10 –µ–¥–∏–Ω–∏—Ü
    const orderQuantity = 10;
    await page.goto('/orders/new');
    const { orderId } = await createCompleteOrder(
      page,
      customer.name,
      [{ name: variety, quantity: orderQuantity }]
    );
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ #${orderId} –Ω–∞ ${orderQuantity} —à—Ç`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–¥–æ–ª–∂–Ω—ã –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è)
    const stockAfterOrder = await checkInventoryLevel(page, variety);
    console.log(`üì¶ –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:`);
    console.log(`   –í—Å–µ–≥–æ: ${stockAfterOrder.quantity} —à—Ç`);
    console.log(`   –†–µ–∑–µ—Ä–≤: ${stockAfterOrder.reserved} —à—Ç`);
    console.log(`   –î–æ—Å—Ç—É–ø–Ω–æ: ${stockAfterOrder.available} —à—Ç`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
    expect(stockAfterOrder.reserved).toBeGreaterThanOrEqual(orderQuantity);
    expect(stockAfterOrder.available).toBeLessThanOrEqual(stockBefore.available - orderQuantity);
    console.log('‚úÖ –¢–æ–≤–∞—Ä –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ –∑–∞–∫–∞–∑');
    
    // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "–û–ø–ª–∞—á–µ–Ω"
    await page.goto('/orders');
    const ordersPage = new OrdersPage(page);
    await ordersPage.changeOrderStatus(orderId!, '–û–ø–ª–∞—á–µ–Ω');
    console.log('‚úÖ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω');
    
    // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–°–æ–±—Ä–∞–Ω" (—Ç–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω —Å–ø–∏—Å–∞—Ç—å—Å—è)
    await ordersPage.changeOrderStatus(orderId!, '–°–æ–±—Ä–∞–Ω');
    console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–±—Ä–∞–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
    const stockFinal = await checkInventoryLevel(page, variety);
    console.log(`üì¶ –§–∏–Ω–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏:`);
    console.log(`   –í—Å–µ–≥–æ: ${stockFinal.quantity} —à—Ç`);
    console.log(`   –†–µ–∑–µ—Ä–≤: ${stockFinal.reserved} —à—Ç`);
    console.log(`   –î–æ—Å—Ç—É–ø–Ω–æ: ${stockFinal.available} —à—Ç`);
    
    // –û—Å—Ç–∞—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã —É–º–µ–Ω—å—à–∏—Ç—å—Å—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∑–∞–∫–∞–∑–µ
    const expectedFinalQuantity = stockBefore.quantity - orderQuantity;
    expect(stockFinal.quantity).toBe(expectedFinalQuantity);
    console.log(`‚úÖ –û—Å—Ç–∞—Ç–∫–∏ —É–º–µ–Ω—å—à–∏–ª–∏—Å—å –Ω–∞ ${orderQuantity} —à—Ç`);
    
    // –†–µ–∑–µ—Ä–≤ –¥–æ–ª–∂–µ–Ω –æ—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è
    expect(stockFinal.reserved).toBeLessThan(stockAfterOrder.reserved);
    console.log('‚úÖ –†–µ–∑–µ—Ä–≤ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏');
    
    console.log('üéâ –°–ø–∏—Å–∞–Ω–∏–µ –∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
  });
});