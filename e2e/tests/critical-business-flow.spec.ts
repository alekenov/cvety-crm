import { test, expect } from '@playwright/test';
import { loginAndNavigateTo } from '../helpers/auth-helper';
import {
  quickReceiveInventory,
  createTestCustomer,
  createCompleteOrder,
  processOrderWorkflow,
  checkInventoryLevel,
  getOrderTrackingToken,
  checkCustomerTracking
} from '../helpers/business-helpers';

test.describe('Critical Business Flow', () => {
  const existingUserPhone = '+77011234567';

  test('–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –æ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É', async ({ page }) => {
    // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Å—å –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞
    test.setTimeout(120000); // 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –≤–µ—Å—å —Ç–µ—Å—Ç

    // ================== 1. –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ==================
    await loginAndNavigateTo(page, '/warehouse', existingUserPhone);
    console.log('‚úÖ –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');

    // ================== 2. –ü–†–ò–ù–Ø–¢–¨ –ü–û–°–¢–ê–í–ö–£ –†–û–ó ==================
    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
    let initialStock;
    try {
      initialStock = await checkInventoryLevel(page, '–†–æ–∑–∞ –†–µ–¥ –ù–∞–æ–º–∏');
    } catch {
      initialStock = { quantity: 0, reserved: 0, available: 0 };
    }
    console.log(`üì¶ –ù–∞—á–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏: ${initialStock.quantity} —à—Ç`);

    // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫—É 100 —Ä–æ–∑ –ø–æ $2.5 –∑–∞ —à—Ç—É–∫—É
    const inventory = await quickReceiveInventory(
      page,
      '–†–æ–∑–∞ –†–µ–¥ –ù–∞–æ–º–∏',
      100,
      2.5,
      475 // –∫—É—Ä—Å USD
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–∏–ª—Å—è
    await expect(page.locator('[data-sonner-toast]')).toBeVisible();
    const newStock = await checkInventoryLevel(page, inventory.variety);
    expect(newStock.quantity).toBe(initialStock.quantity + 100);
    console.log('‚úÖ –®–∞–≥ 2: –ü–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –æ—Å—Ç–∞—Ç–∫–∏ —É–≤–µ–ª–∏—á–∏–ª–∏—Å—å –Ω–∞ 100 —à—Ç');

    // ================== 3. –°–û–ó–î–ê–¢–¨ –ö–õ–ò–ï–ù–¢–ê ==================
    await page.goto('/customers');
    await page.waitForSelector('h1:has-text("–ö–ª–∏–µ–Ω—Ç—ã")');
    
    const customer = await createTestCustomer(page, '–ê–π–≥—É–ª—å –°–∞—Ç–ø–∞–µ–≤–∞');
    await expect(page.locator('[data-sonner-toast]')).toContainText('–¥–æ–±–∞–≤–ª–µ–Ω');
    console.log(`‚úÖ –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç "${customer.name}"`);

    // ================== 4. –°–û–ó–î–ê–¢–¨ –ó–ê–ö–ê–ó ==================
    await page.goto('/orders/new');
    await page.waitForSelector('[data-testid="step-indicator"]');
    
    const { orderId, orderData } = await createCompleteOrder(
      page,
      customer.name,
      [{ name: inventory.variety, quantity: 25 }], // 25 —Ä–æ–∑ –∏–∑ 100
      new Date(Date.now() + 24 * 60 * 60 * 1000) // –∑–∞–≤—Ç—Ä–∞
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω
    expect(orderId).toBeTruthy();
    await expect(page).toHaveURL('/orders');
    console.log(`‚úÖ –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ #${orderId} –Ω–∞ 25 —Ä–æ–∑`);

    // ================== 5. –û–ü–õ–ê–¢–ò–¢–¨ –ó–ê–ö–ê–ó ==================
    await page.waitForTimeout(1000);
    await processOrderWorkflow(page, orderId!, ['paid']);
    await expect(page.locator('[data-sonner-toast]')).toContainText('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞');
    console.log('‚úÖ –®–∞–≥ 5: –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω');

    // ================== 6. –°–û–ë–†–ê–¢–¨ –ë–£–ö–ï–¢ ==================
    await processOrderWorkflow(page, orderId!, ['assembled']);
    await expect(page.locator('[data-sonner-toast]')).toContainText('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞');
    console.log('‚úÖ –®–∞–≥ 6: –ë—É–∫–µ—Ç —Å–æ–±—Ä–∞–Ω');

    // ================== 7. –î–û–°–¢–ê–í–ò–¢–¨ –ö–õ–ò–ï–ù–¢–£ ==================
    await processOrderWorkflow(page, orderId!, ['delivery']);
    await expect(page.locator('[data-sonner-toast]')).toContainText('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞');
    console.log('‚úÖ –®–∞–≥ 7: –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É');

    // ================== 8. –ü–†–û–í–ï–†–ò–¢–¨ –û–°–¢–ê–¢–ö–ò ==================
    const finalStock = await checkInventoryLevel(page, inventory.variety);
    
    // –û—Å—Ç–∞—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã —É–º–µ–Ω—å—à–∏—Ç—å—Å—è –Ω–∞ 25 —à—Ç—É–∫
    const expectedQuantity = initialStock.quantity + 100 - 25;
    expect(finalStock.quantity).toBe(expectedQuantity);
    console.log(`‚úÖ –®–∞–≥ 8: –û—Å—Ç–∞—Ç–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: –±—ã–ª–æ ${initialStock.quantity + 100}, —Å—Ç–∞–ª–æ ${finalStock.quantity}`);

    // ================== 9. –ü–†–û–í–ï–†–ò–¢–¨ –¢–†–ï–ö–ò–ù–ì ==================
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —Ç—Ä–µ–∫–∏–Ω–≥–∞
    const trackingToken = await getOrderTrackingToken(page, orderId!);
    expect(trackingToken).toBeTruthy();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—Ä–µ–∫–∏–Ω–≥–∞
    const tracking = await checkCustomerTracking(page, trackingToken);
    expect(tracking.status).toContain('–î–æ—Å—Ç–∞–≤–∫–∞');
    expect(tracking.isMasked).toBe(true); // –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω—ã
    console.log(`‚úÖ –®–∞–≥ 9: –¢—Ä–µ–∫–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ–∫–µ–Ω: ${trackingToken}`);

    // ================== 10. –ó–ê–í–ï–†–®–ò–¢–¨ –ó–ê–ö–ê–ó ==================
    await page.goto('/orders');
    await processOrderWorkflow(page, orderId!, ['completed']);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    const finalRow = page.locator('tbody tr').filter({ hasText: `#${orderId}` });
    const statusBadge = finalRow.locator('[data-testid="order-status"], .badge');
    await expect(statusBadge).toContainText('–ó–∞–≤–µ—Ä—à–µ–Ω');
    console.log('‚úÖ –®–∞–≥ 10: –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');

    // ================== –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê ==================
    console.log('');
    console.log('üéâ –ü–û–õ–ù–´–ô –ë–ò–ó–ù–ï–°-–¶–ò–ö–õ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!');
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
    console.log(`   - –ü—Ä–∏–Ω—è—Ç–æ —Ç–æ–≤–∞—Ä–∞: 100 —à—Ç`);
    console.log(`   - –ü—Ä–æ–¥–∞–Ω–æ: 25 —à—Ç`);
    console.log(`   - –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–∫–ª–∞–¥–µ: ${finalStock.quantity} —à—Ç`);
    console.log(`   - –°–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç: ${customer.name}`);
    console.log(`   - –í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–∫–∞–∑: #${orderId}`);
    console.log(`   - –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${25 * inventory.retailPrice} ‚Ç∏`);
  });

  test('–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π', async ({ page }) => {
    // –ö–æ—Ä–æ—Ç–∫–∏–π smoke test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
    test.setTimeout(30000); // 30 —Å–µ–∫—É–Ω–¥

    await loginAndNavigateTo(page, '/orders', existingUserPhone);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    const pages = [
      { url: '/orders', title: '–ó–∞–∫–∞–∑—ã' },
      { url: '/warehouse', title: '–û—Å—Ç–∞—Ç–∫–∏ —Å–∫–ª–∞–¥–∞' },
      { url: '/customers', title: '–ö–ª–∏–µ–Ω—Ç—ã' },
      { url: '/production', title: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ' },
      { url: '/catalog', title: '–ö–∞—Ç–∞–ª–æ–≥' }
    ];

    for (const pageInfo of pages) {
      await page.goto(pageInfo.url);
      await expect(page.locator('h1')).toContainText(pageInfo.title);
      console.log(`‚úÖ ${pageInfo.title} - –¥–æ—Å—Ç—É–ø–Ω–∞`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    await page.goto('/orders/new');
    await expect(page.locator('[data-testid="step-indicator"]')).toBeVisible();
    console.log('‚úÖ –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫
    await page.goto('/orders');
    await page.fill('[data-testid="search-input"]', '—Ç–µ—Å—Ç');
    await page.waitForTimeout(500);
    console.log('‚úÖ –ü–æ–∏—Å–∫ - —Ä–∞–±–æ—Ç–∞–µ—Ç');

    console.log('üéâ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
  });
});