import { test, expect } from '@playwright/test';
import { OrdersPage } from '../pages/OrdersPage';
import { loginAndNavigateTo } from '../helpers/auth-helper';
import { createTestCustomer, createCompleteOrder } from '../helpers/business-helpers';

test.describe('Order Status Workflow', () => {
  const existingUserPhone = '+77011234567';
  let ordersPage: OrdersPage;

  test.beforeEach(async ({ page }) => {
    ordersPage = new OrdersPage(page);
    await loginAndNavigateTo(page, '/orders', existingUserPhone);
  });

  test('Workflow —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞: new ‚Üí paid ‚Üí assembled ‚Üí delivery ‚Üí completed', async ({ page }) => {
    test.setTimeout(60000);
    
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç workflow —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞');
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ helper —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    console.log('üìù –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è workflow');
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    await page.goto('/customers');
    const customer = await createTestCustomer(page, '–ö–ª–∏–µ–Ω—Ç –¥–ª—è Workflow');
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç: ${customer.name}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–¥–µ–∂–Ω—ã–π helper –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    console.log('üì¶ –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ helper...');
    await page.goto('/orders/new');
    const { orderId } = await createCompleteOrder(
      page,
      customer.name,
      [{ name: '–†–æ–∑–∞ –∫—Ä–∞—Å–Ω–∞—è', quantity: 10 }]
    );
    
    if (!orderId) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑');
      return;
    }
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ #${orderId}`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
    await page.goto('/orders');
    await page.waitForSelector('tbody tr', { timeout: 5000 });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    let orderRow = page.locator('tbody tr').filter({ hasText: `#${orderId}` });
    let statusBadge = orderRow.locator('.badge, [data-testid="order-status"]').first();
    const initialStatus = await statusBadge.textContent();
    console.log(`üìä –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${initialStatus}`);
    
    // –®–ê–ì 1: –ù–æ–≤—ã–π ‚Üí –û–ø–ª–∞—á–µ–Ω
    console.log('\nüìã –®–∞–≥ 1: –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–û–ø–ª–∞—á–µ–Ω"');
    await ordersPage.changeOrderStatus(orderId, '–û–ø–ª–∞—á–µ–Ω');
    await expect(page.locator('[data-sonner-toast]')).toContainText('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    orderRow = page.locator('tbody tr').filter({ hasText: `#${orderId}` });
    statusBadge = orderRow.locator('.badge, [data-testid="order-status"]').first();
    await expect(statusBadge).toContainText('–û–ø–ª–∞—á–µ–Ω');
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: –û–ø–ª–∞—á–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    const menuButton = orderRow.locator('button[aria-haspopup="menu"], button:has(svg)').last();
    await menuButton.click();
    await page.waitForTimeout(300);
    
    // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã: –°–æ–±—Ä–∞–Ω, –ü—Ä–æ–±–ª–µ–º–∞
    const menuItems = page.locator('[role="menuitem"]');
    const menuTexts = await menuItems.allTextContents();
    expect(menuTexts.join(' ')).toContain('–°–æ–±—Ä–∞–Ω');
    console.log('‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–û–ø–ª–∞—á–µ–Ω"');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
    await page.keyboard.press('Escape');
    await page.waitForTimeout(300);
    
    // –®–ê–ì 2: –û–ø–ª–∞—á–µ–Ω ‚Üí –°–æ–±—Ä–∞–Ω
    console.log('\nüìã –®–∞–≥ 2: –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–°–æ–±—Ä–∞–Ω"');
    await ordersPage.changeOrderStatus(orderId!, '–°–æ–±—Ä–∞–Ω');
    await expect(page.locator('[data-sonner-toast]')).toContainText('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞');
    
    orderRow = page.locator('tbody tr').filter({ hasText: `#${orderId}` });
    statusBadge = orderRow.locator('.badge, [data-testid="order-status"]').first();
    await expect(statusBadge).toContainText('–°–æ–±—Ä–∞–Ω');
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: –°–æ–±—Ä–∞–Ω');
    
    // –®–ê–ì 3: –°–æ–±—Ä–∞–Ω ‚Üí –î–æ—Å—Ç–∞–≤–∫–∞
    console.log('\nüìã –®–∞–≥ 3: –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–î–æ—Å—Ç–∞–≤–∫–∞"');
    await ordersPage.changeOrderStatus(orderId!, '–î–æ—Å—Ç–∞–≤–∫–∞');
    await expect(page.locator('[data-sonner-toast]')).toContainText('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞');
    
    orderRow = page.locator('tbody tr').filter({ hasText: `#${orderId}` });
    statusBadge = orderRow.locator('.badge, [data-testid="order-status"]').first();
    await expect(statusBadge).toContainText('–î–æ—Å—Ç–∞–≤–∫–∞');
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: –î–æ—Å—Ç–∞–≤–∫–∞');
    
    // –®–ê–ì 4: –î–æ—Å—Ç–∞–≤–∫–∞ ‚Üí –ó–∞–≤–µ—Ä—à–µ–Ω
    console.log('\nüìã –®–∞–≥ 4: –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ó–∞–≤–µ—Ä—à–µ–Ω"');
    await ordersPage.changeOrderStatus(orderId!, '–ó–∞–≤–µ—Ä—à–µ–Ω');
    await expect(page.locator('[data-sonner-toast]')).toContainText('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞');
    
    orderRow = page.locator('tbody tr').filter({ hasText: `#${orderId}` });
    statusBadge = orderRow.locator('.badge, [data-testid="order-status"]').first();
    await expect(statusBadge).toContainText('–ó–∞–≤–µ—Ä—à–µ–Ω');
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: –ó–∞–≤–µ—Ä—à–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
    const completedRow = page.locator('tbody tr').filter({ hasText: `#${orderId}` });
    const rowClasses = await completedRow.getAttribute('class');
    if (rowClasses?.includes('opacity')) {
      console.log('‚úÖ –ó–∞–∫–∞–∑ –≤–∏–∑—É–∞–ª—å–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π');
    }
    
    console.log('\nüéâ Workflow —Å—Ç–∞—Ç—É—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!');
    console.log('üìä –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã:');
    console.log('   1. –ù–æ–≤—ã–π ‚Üí –û–ø–ª–∞—á–µ–Ω');
    console.log('   2. –û–ø–ª–∞—á–µ–Ω ‚Üí –°–æ–±—Ä–∞–Ω');
    console.log('   3. –°–æ–±—Ä–∞–Ω ‚Üí –î–æ—Å—Ç–∞–≤–∫–∞');
    console.log('   4. –î–æ—Å—Ç–∞–≤–∫–∞ ‚Üí –ó–∞–≤–µ—Ä—à–µ–Ω');
  });

  test.skip('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', async ({ page }) => {
    test.setTimeout(45000);
    
    console.log('üö® –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤');
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ç–µ—Å—Ç
    console.log('‚è≠Ô∏è –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω');
  });
});