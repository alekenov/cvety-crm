#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å —á–µ—Ç–∫–∏–º–∏ –¥–∞—Ç–∞–º–∏
"""

import os
import sys
from datetime import datetime, timedelta
from sqlalchemy import create_engine, delete
from sqlalchemy.orm import sessionmaker

# Add backend to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.models.warehouse import WarehouseItem, WarehouseMovement, Delivery, DeliveryPosition, MovementType
from app.db.session import Base

# Database connection
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./flower_shop.db")
if DATABASE_URL.startswith("postgres://"):
    DATABASE_URL = DATABASE_URL.replace("postgres://", "postgresql://", 1)

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def clear_and_add_data():
    db = SessionLocal()
    try:
        print("üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–≤–∏–∂–µ–Ω–∏—è
        deleted_movements = db.query(WarehouseMovement).delete()
        print(f"  ‚úì –£–¥–∞–ª–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–π: {deleted_movements}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤–æ–∫
        deleted_positions = db.query(DeliveryPosition).delete()
        print(f"  ‚úì –£–¥–∞–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å—Ç–∞–≤–æ–∫: {deleted_positions}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ—Å—Ç–∞–≤–∫–∏
        deleted_deliveries = db.query(Delivery).delete()
        print(f"  ‚úì –£–¥–∞–ª–µ–Ω–æ –ø–æ—Å—Ç–∞–≤–æ–∫: {deleted_deliveries}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã
        deleted_items = db.query(WarehouseItem).delete()
        print(f"  ‚úì –£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {deleted_items}")
        
        db.commit()
        print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!")
        
        print("\nüì¶ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –ø–æ—Å—Ç–∞–≤–æ–∫...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏ —Å —è–≤–Ω–æ —Ä–∞–∑–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
        deliveries_data = [
            {
                "supplier": "–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–µ —Ü–≤–µ—Ç—ã",
                "farm": "Royal FloraHolland",
                "delivery_date": datetime(2024, 8, 1),  # 1 –∞–≤–≥—É—Å—Ç–∞
                "currency": "EUR",
                "rate": 520.0,
                "comment": "–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞"
            },
            {
                "supplier": "–≠–∫–≤–∞–¥–æ—Ä –î–∏—Ä–µ–∫—Ç",
                "farm": "Rosas del Ecuador",
                "delivery_date": datetime(2024, 8, 5),  # 5 –∞–≤–≥—É—Å—Ç–∞
                "currency": "USD",
                "rate": 470.0,
                "comment": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞"
            },
            {
                "supplier": "–ö–µ–Ω–∏—è Flowers",
                "farm": "Nairobi Rose Farm",
                "delivery_date": datetime(2024, 8, 10),  # 10 –∞–≤–≥—É—Å—Ç–∞
                "currency": "USD",
                "rate": 460.0,
                "comment": "–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞"
            },
            {
                "supplier": "–ú–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫",
                "farm": "–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∏–µ —Ç–µ–ø–ª–∏—Ü—ã",
                "delivery_date": datetime(2024, 8, 13),  # 13 –∞–≤–≥—É—Å—Ç–∞ (—Å–µ–≥–æ–¥–Ω—è)
                "currency": "KZT",
                "rate": 1.0,
                "comment": "–°–≤–µ–∂–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è"
            }
        ]
        
        # –¢–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏
        products_per_delivery = [
            # –ü–æ—Å—Ç–∞–≤–∫–∞ 1 –∞–≤–≥—É—Å—Ç–∞
            [
                {"variety": "–†–æ–∑–∞ Red Naomi", "height_cm": 60, "qty": 300, "cost_per_stem": 1.5},
                {"variety": "–†–æ–∑–∞ White Naomi", "height_cm": 50, "qty": 250, "cost_per_stem": 1.3},
            ],
            # –ü–æ—Å—Ç–∞–≤–∫–∞ 5 –∞–≤–≥—É—Å—Ç–∞
            [
                {"variety": "–†–æ–∑–∞ Freedom", "height_cm": 80, "qty": 400, "cost_per_stem": 2.5},
                {"variety": "–†–æ–∑–∞ Explorer", "height_cm": 90, "qty": 350, "cost_per_stem": 3.0},
            ],
            # –ü–æ—Å—Ç–∞–≤–∫–∞ 10 –∞–≤–≥—É—Å—Ç–∞
            [
                {"variety": "–ü–∏–æ–Ω Sarah Bernhardt", "height_cm": 60, "qty": 200, "cost_per_stem": 4.0},
                {"variety": "–ì–æ—Ä—Ç–µ–Ω–∑–∏—è –±–µ–ª–∞—è", "height_cm": 50, "qty": 150, "cost_per_stem": 3.5},
            ],
            # –ü–æ—Å—Ç–∞–≤–∫–∞ 13 –∞–≤–≥—É—Å—Ç–∞ (—Å–µ–≥–æ–¥–Ω—è)
            [
                {"variety": "–¢—é–ª—å–ø–∞–Ω Strong Gold", "height_cm": 35, "qty": 500, "cost_per_stem": 150},
                {"variety": "–•—Ä–∏–∑–∞–Ω—Ç–µ–º–∞ –±–µ–ª–∞—è", "height_cm": 60, "qty": 300, "cost_per_stem": 250},
            ]
        ]
        
        created_items = []
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç–æ–≤–∞—Ä—ã
        for i, delivery_data in enumerate(deliveries_data):
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫—É
            delivery = Delivery(
                supplier=delivery_data["supplier"],
                farm=delivery_data["farm"],
                delivery_date=delivery_data["delivery_date"],
                currency=delivery_data["currency"],
                rate=delivery_data["rate"],
                comment=delivery_data["comment"],
                created_by="test_script",
                cost_total=0
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤–∫–∏
            total_cost = 0
            for product in products_per_delivery[i]:
                position = DeliveryPosition(
                    variety=product["variety"],
                    height_cm=product["height_cm"],
                    qty=product["qty"],
                    cost_per_stem=product["cost_per_stem"],
                    total_cost=product["qty"] * product["cost_per_stem"]
                )
                delivery.positions.append(position)
                total_cost += position.total_cost
            
            delivery.cost_total = total_cost
            db.add(delivery)
            db.flush()
            
            # –°–æ–∑–¥–∞–µ–º —Å–∫–ª–∞–¥—Å–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            for j, product in enumerate(products_per_delivery[i]):
                batch_code = f"B{delivery.delivery_date.strftime('%Y%m%d')}-{delivery.id}-{j+1}"
                sku = f"{product['variety'][:3].upper()}-{delivery.farm[:3].upper()}-{product['height_cm']}-{batch_code}"
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
                cost_in_kzt = product["cost_per_stem"] * delivery.rate
                markup = 2.0 if "–†–æ–∑–∞" in product["variety"] else 1.8
                recommended_price = cost_in_kzt * markup
                
                warehouse_item = WarehouseItem(
                    sku=sku,
                    batch_code=batch_code,
                    variety=product["variety"],
                    height_cm=product["height_cm"],
                    farm=delivery.farm,
                    supplier=delivery.supplier,
                    delivery_date=delivery.delivery_date,
                    currency=delivery.currency,
                    rate=delivery.rate,
                    cost=product["cost_per_stem"],
                    recommended_price=recommended_price,
                    price=recommended_price,
                    markup_pct=(markup - 1) * 100,
                    qty=product["qty"],
                    reserved_qty=0,
                    on_showcase=True,
                    to_write_off=False,
                    hidden=False,
                    updated_by="test_script"
                )
                
                db.add(warehouse_item)
                db.flush()
                
                # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ)
                movement = WarehouseMovement(
                    warehouse_item_id=warehouse_item.id,
                    type=MovementType.IN,
                    quantity=product["qty"],
                    description=f"–ü–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç {delivery.supplier} ({delivery.delivery_date.strftime('%d.%m.%Y')})",
                    reference_type="delivery",
                    reference_id=str(delivery.id),
                    created_by="test_script",
                    qty_before=0,
                    qty_after=product["qty"]
                )
                db.add(movement)
                
                created_items.append(warehouse_item)
                print(f"  ‚úì {product['variety']} - –ü–æ—Å—Ç–∞–≤–∫–∞: {delivery.delivery_date.strftime('%d –∞–≤–≥—É—Å—Ç–∞')} ({product['qty']} —à—Ç)")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–≤–∏–∂–µ–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        print("\nüìä –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–≤–∏–∂–µ–Ω–∏–π –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤...")
        
        if len(created_items) >= 2:
            # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ - –ø—Ä–æ–¥–∞–∂–∏
            item1 = created_items[0]
            current_qty = item1.qty
            
            sales = [
                {"qty": 50, "date": datetime(2024, 8, 2), "desc": "–ë–æ–ª—å—à–æ–π –∑–∞–∫–∞–∑ –Ω–∞ —Å–≤–∞–¥—å–±—É"},
                {"qty": 30, "date": datetime(2024, 8, 4), "desc": "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±—É–∫–µ—Ç"},
                {"qty": 20, "date": datetime(2024, 8, 7), "desc": "–†–æ–∑–Ω–∏—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞"},
            ]
            
            for sale in sales:
                current_qty -= sale["qty"]
                movement = WarehouseMovement(
                    warehouse_item_id=item1.id,
                    type=MovementType.OUT,
                    quantity=-sale["qty"],
                    description=sale["desc"],
                    reference_type="order",
                    reference_id=f"ORD-{sale['date'].day:02d}",
                    created_by="manager",
                    created_at=sale["date"],
                    qty_before=current_qty + sale["qty"],
                    qty_after=current_qty
                )
                db.add(movement)
            
            item1.qty = current_qty
            print(f"  ‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂ –¥–ª—è {item1.variety}")
            
            # –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ - —Å–ø–∏—Å–∞–Ω–∏–µ
            item2 = created_items[1]
            writeoff_qty = 20
            item2.qty -= writeoff_qty
            
            writeoff = WarehouseMovement(
                warehouse_item_id=item2.id,
                type=MovementType.ADJUSTMENT,
                quantity=-writeoff_qty,
                description="–°–ø–∏—Å–∞–Ω–∏–µ: —Ü–≤–µ—Ç—ã –∑–∞–≤—è–ª–∏",
                reference_type="writeoff",
                reference_id="WO-002",
                created_by="warehouse_manager",
                created_at=datetime(2024, 8, 6),
                qty_before=item2.qty + writeoff_qty,
                qty_after=item2.qty
            )
            db.add(writeoff)
            print(f"  ‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {item2.variety}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        
        print("\n‚úÖ –ù–æ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        print(f"–í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(created_items)}")
        print("\nüìÖ –î–∞—Ç—ã –ø–æ—Å—Ç–∞–≤–æ–∫:")
        for delivery_data in deliveries_data:
            print(f"  ‚Ä¢ {delivery_data['delivery_date'].strftime('%d –∞–≤–≥—É—Å—Ç–∞')} - {delivery_data['supplier']}")
        
        print("\nüîó –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        for i, item in enumerate(created_items[:4], 1):
            print(f"  {i}. {item.variety}")
            print(f"     –ü–æ—Å—Ç–∞–≤–∫–∞: {item.delivery_date.strftime('%d –∞–≤–≥—É—Å—Ç–∞ %Y')}")
            print(f"     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.qty} —à—Ç")
            print(f"     URL: http://localhost:5178/pos-warehouse/{item.id}")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == "__main__":
    clear_and_add_data()