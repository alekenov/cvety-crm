#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ Railway
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü, –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
"""
import os
import sys
from datetime import datetime
from sqlalchemy import create_engine, inspect, text
from sqlalchemy.orm import sessionmaker
import psycopg2
from psycopg2.extras import RealDictCursor

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    db_url = os.environ.get('DATABASE_URL')
    if not db_url:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return 1
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
        engine = create_engine(db_url)
        inspector = inspect(engine)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
        tables = inspector.get_table_names()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        expected_tables = [
            'alembic_version',
            'shops', 'users', 'customers', 'customer_addresses', 'customer_important_dates',
            'products', 'product_images', 'product_ingredients', 'product_components',
            'orders', 'order_items', 'order_history', 'order_photos',
            'warehouse_items', 'warehouse_movements',
            'supplies', 'supply_items', 'flower_categories',
            'decorative_materials', 'comments'
        ]
        
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü:")
        missing_tables = []
        for table in expected_tables:
            if table in tables:
                print(f"  ‚úÖ {table}")
            else:
                print(f"  ‚ùå {table} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                missing_tables.append(table)
        
        if missing_tables:
            print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
        
        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        print("\nüìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö:")
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        session = SessionLocal()
        
        table_counts = {}
        for table in sorted(tables):
            try:
                result = session.execute(text(f"SELECT COUNT(*) FROM {table}"))
                count = result.scalar()
                table_counts[table] = count
                print(f"  {table}: {count}")
            except Exception as e:
                print(f"  {table}: ‚ùå –û—à–∏–±–∫–∞ - {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
        print("\nüè™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:")
        try:
            result = session.execute(text(
                "SELECT id, name, phone, is_active FROM shops WHERE phone = '+77011234567'"
            ))
            shop = result.fetchone()
            if shop:
                print(f"  ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω –Ω–∞–π–¥–µ–Ω:")
                print(f"     ID: {shop.id}")
                print(f"     –ù–∞–∑–≤–∞–Ω–∏–µ: {shop.name}")
                print(f"     –¢–µ–ª–µ—Ñ–æ–Ω: {shop.phone}")
                print(f"     –ê–∫—Ç–∏–≤–µ–Ω: {shop.is_active}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
                result = session.execute(text(
                    f"SELECT COUNT(*) FROM users WHERE shop_id = {shop.id}"
                ))
                user_count = result.scalar()
                print(f"     –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
                result = session.execute(text(
                    f"SELECT COUNT(*) FROM orders WHERE shop_id = {shop.id}"
                ))
                order_count = result.scalar()
                print(f"     –ó–∞–∫–∞–∑–æ–≤: {order_count}")
                
            else:
                print("  ‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω (+77011234567) –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π
        print("\nüîÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–≥—Ä–∞—Ü–∏—è—Ö:")
        try:
            result = session.execute(text("SELECT version_num FROM alembic_version"))
            version = result.scalar()
            if version:
                print(f"  ‚úÖ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {version}")
            else:
                print("  ‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–≥—Ä–∞—Ü–∏–π: {str(e)}")
        
        session.close()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\nüìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
        total_records = sum(table_counts.values())
        print(f"  –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        print(f"  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}")
        
        if total_records == 0:
            print("  ‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        elif total_records < 100:
            print("  ‚ö†Ô∏è  –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        else:
            print("  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {datetime.now().strftime('%H:%M:%S')}")
        return 0
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {str(e)}")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)