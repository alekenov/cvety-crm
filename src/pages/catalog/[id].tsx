import { useState, useEffect } from "react"
import { useParams, useNavigate } from "react-router-dom"
import { ArrowLeft, Edit, Trash2, Loader2, Package } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { toast } from "sonner"
import { productsApi, productComponentsApi } from "@/lib/api"
import type { ProductWithStats, ProductComponent } from "@/lib/types"

export function ProductDetailPage() {
  const { id } = useParams<{ id: string }>()
  const navigate = useNavigate()
  const [product, setProduct] = useState<ProductWithStats | null>(null)
  const [components, setComponents] = useState<ProductComponent[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const loadProductData = async () => {
      if (!id) return
      
      try {
        setLoading(true)
        setError(null)
        
        // Load product and components in parallel
        const [productData, componentsData] = await Promise.all([
          productsApi.getById(parseInt(id)),
          productComponentsApi.getAll(parseInt(id))
        ])
        
        setProduct(productData)
        setComponents(componentsData)
      } catch (err) {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞')
        console.error('Error loading product:', err)
      } finally {
        setLoading(false)
      }
    }

    loadProductData()
  }, [id])

  const handleDelete = async () => {
    if (!product || !window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä "${product.name}"?`)) {
      return
    }

    try {
      await productsApi.delete(product.id)
      toast.success(`–¢–æ–≤–∞—Ä "${product.name}" —É–¥–∞–ª–µ–Ω`)
      navigate("/catalog")
    } catch (err) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞')
      console.error('Error deleting product:', err)
    }
  }

  const calculateTotalCost = () => {
    return components.reduce((total, comp) => total + comp.totalCost, 0)
  }

  const getCategoryLabel = (category: string) => {
    const labels: Record<string, string> = {
      bouquet: "–ë—É–∫–µ—Ç",
      composition: "–ö–æ–º–ø–æ–∑–∏—Ü–∏—è",
      potted: "–ì–æ—Ä—à–µ—á–Ω–æ–µ",
      other: "–î—Ä—É–≥–æ–µ"
    }
    return labels[category] || category
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <Loader2 className="h-8 w-8 animate-spin" />
        <span className="ml-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–∞...</span>
      </div>
    )
  }

  if (error || !product) {
    return (
      <div className="text-center py-12">
        <p className="text-red-500 mb-4">{error || "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}</p>
        <Button onClick={() => navigate("/catalog")}>
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É
        </Button>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Button
          variant="ghost"
          size="icon"
          onClick={() => navigate("/catalog")}
        >
          <ArrowLeft className="h-4 w-4" />
        </Button>
        <div className="flex-1">
          <h1 className="text-2xl md:text-3xl font-bold tracking-tight">
            {product.name}
          </h1>
          <div className="flex items-center gap-2 mt-1">
            <Badge variant="secondary">{getCategoryLabel(product.category)}</Badge>
            {product.isPopular && <Badge>–ü–æ–ø—É–ª—è—Ä–Ω—ã–π</Badge>}
            {product.isNew && <Badge variant="outline">–ù–æ–≤–∏–Ω–∫–∞</Badge>}
            {!product.isActive && <Badge variant="destructive">–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</Badge>}
          </div>
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            onClick={() => navigate(`/catalog/${product.id}/edit`)}
          >
            <Edit className="mr-2 h-4 w-4" />
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
          </Button>
          <Button
            variant="destructive"
            onClick={handleDelete}
          >
            <Trash2 className="mr-2 h-4 w-4" />
            –£–¥–∞–ª–∏—Ç—å
          </Button>
        </div>
      </div>

      <div className="grid gap-6 lg:grid-cols-3">
        {/* Main info */}
        <div className="lg:col-span-2 space-y-6">
          {/* Images */}
          {product.images && product.images.length > 0 && (
            <Card>
              <CardContent className="p-0">
                <div className="grid grid-cols-2 md:grid-cols-3 gap-2 p-6">
                  {product.images.map((image, index) => (
                    <div key={image.id} className="relative aspect-square">
                      <img
                        src={image.imageUrl}
                        alt={`${product.name} ${index + 1}`}
                        className="w-full h-full object-cover rounded-lg"
                      />
                      {image.isPrimary && (
                        <Badge className="absolute top-2 left-2">–ì–ª–∞–≤–Ω–∞—è</Badge>
                      )}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Description */}
          {product.description && (
            <Card>
              <CardHeader>
                <CardTitle>–û–ø–∏—Å–∞–Ω–∏–µ</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground">{product.description}</p>
              </CardContent>
            </Card>
          )}

          {/* Components */}
          <Card>
            <CardHeader>
              <CardTitle>
                <Package className="inline-block mr-2 h-5 w-5" />
                –°–æ—Å—Ç–∞–≤ –±—É–∫–µ—Ç–∞
              </CardTitle>
              <CardDescription>
                {components.length > 0 
                  ? `${components.length} –ø–æ–∑–∏—Ü–∏–π`
                  : "–°–æ—Å—Ç–∞–≤ –Ω–µ —É–∫–∞–∑–∞–Ω"
                }
              </CardDescription>
            </CardHeader>
            <CardContent>
              {components.length > 0 ? (
                <div className="space-y-4">
                  {components.map((comp) => (
                    <div key={comp.id} className="flex items-center justify-between">
                      <div className="flex-1">
                        <div className="font-medium">
                          {comp.name}
                        </div>
                        {comp.description && (
                          <div className="text-sm text-muted-foreground">
                            {comp.description}
                          </div>
                        )}
                        <div className="text-xs text-muted-foreground mt-1">
                          {comp.componentType === 'flower' && 'üåπ –¶–≤–µ—Ç–æ–∫'}
                          {comp.componentType === 'material' && 'üéÄ –ú–∞—Ç–µ—Ä–∏–∞–ª'}
                          {comp.componentType === 'service' && 'üë®‚Äçüé® –£—Å–ª—É–≥–∞'}
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="font-medium">{comp.quantity} {comp.unit}</div>
                        <div className="text-sm text-muted-foreground">
                          {comp.unitPrice.toLocaleString()} ‚Ç∏ / {comp.unit}
                        </div>
                        {comp.totalPrice > 0 && (
                          <div className="text-sm font-semibold">
                            = {comp.totalPrice.toLocaleString()} ‚Ç∏
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                  <Separator />
                  <div className="flex items-center justify-between font-semibold">
                    <span>–ò—Ç–æ–≥–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                    <span className="text-lg">{calculateTotalCost().toLocaleString()} ‚Ç∏</span>
                  </div>
                </div>
              ) : (
                <p className="text-muted-foreground">
                  –°–æ—Å—Ç–∞–≤ –±—É–∫–µ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.
                </p>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Sidebar with prices and stats */}
        <div className="space-y-6">
          {/* Prices */}
          <Card>
            <CardHeader>
              <CardTitle>–¶–µ–Ω—ã</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <div className="text-sm text-muted-foreground">–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å</div>
                <div className="text-xl font-semibold">
                  {product.costPrice.toLocaleString()} ‚Ç∏
                </div>
              </div>
              
              <div>
                <div className="text-sm text-muted-foreground">–†–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞</div>
                <div className="text-xl font-semibold">
                  {product.retailPrice.toLocaleString()} ‚Ç∏
                </div>
              </div>
              
              {product.salePrice && (
                <div>
                  <div className="text-sm text-muted-foreground">–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π</div>
                  <div className="text-xl font-semibold text-destructive">
                    {product.salePrice.toLocaleString()} ‚Ç∏
                    <Badge variant="destructive" className="ml-2">
                      -{product.discountPercentage}%
                    </Badge>
                  </div>
                </div>
              )}
              
              <Separator />
              
              <div>
                <div className="text-sm text-muted-foreground">–ù–∞—Ü–µ–Ω–∫–∞</div>
                <div className="text-xl font-semibold">
                  {Math.round(((product.currentPrice - product.costPrice) / product.costPrice) * 100)}%
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Statistics */}
          <Card>
            <CardHeader>
              <CardTitle>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <div className="text-sm text-muted-foreground">–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤</div>
                <div className="text-xl font-semibold">{product.totalOrders}</div>
              </div>
              
              <div>
                <div className="text-sm text-muted-foreground">–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞</div>
                <div className="text-xl font-semibold">
                  {product.totalRevenue.toLocaleString()} ‚Ç∏
                </div>
              </div>
              
              <Separator />
              
              <div className="text-sm text-muted-foreground">
                <div>–°–æ–∑–¥–∞–Ω: {new Date(product.createdAt).toLocaleDateString()}</div>
                <div>–û–±–Ω–æ–≤–ª–µ–Ω: {new Date(product.updatedAt).toLocaleDateString()}</div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}